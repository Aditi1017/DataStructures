/*** Input :
5 5
1 0
0 3
3 4
2 1
0 2

Output: 
SCC 0 1 2 
SCC 3 
SCC 4 
***/

#include <bits/stdc++.h>
using namespace std;

void dfs(int node, stack<int>&st, vector<int>&vis, vector<int>adj[]){
    vis[node] =1;
    for(auto it: adj[node]){
        if(!vis[it])
        dfs(it,st,vis,adj);
    }
    st.push(node);
}

void revDfs(int node, vector<int>&vis, vector<int>transpose[]){
    cout << node << " ";
    vis[node]=1;
    for(auto it: transpose[node]){
        if(!vis[it])
        revDfs(it,vis,transpose);
    }
}

int main() {

    int N , e;
    cin >> N >> e;
    vector<int> adj[N];
    
    for(int i =0 ; i<e ; i++){
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
    }
     stack<int>st;
     vector<int> vis(N,0);
     for(int i =0; i<N ; i++){
         if(!vis[i])
         dfs(i,st,vis,adj);
     }
     
     vector<int>transpose[N];  // another adjaceny matrix
     for(int i=0 ; i<N ; i++){
         vis[i]=0;                              // remark the visited as o as dfs marked all visited
         
         for(auto it: adj[i]){
         transpose[it].push_back(i);
         }
     }
     
    
     
     while(!st.empty()){
         int node = st.top();
         st.pop();
         if(!vis[node])
         {
             cout << "SCC ";
             revDfs(node,vis,transpose);
             cout << endl;
         }
     }
     
	return 0;
}
