#include <bits/stdc++.h>
#include<iostream>
using namespace std;

bool isBipartiteBfs(int i, vector<int>adj[], int color[]){
    queue<int>q;
    q.push(i);
    color[i] = 1;
    while(!q.empty()){
        int node = q.front();
        q.pop();
        for(auto it: adj[node]){
            if(color[it]==-1)
            {
                color[it] = 1-color[node];
            }
            else if(color[node] == color[it])
            return false;
        }
    }
    return true;
}

bool CheckBipartite(vector<int>adj[], int n){
    int color[n];
    memset(color, -1, sizeof(color));
    for(int i=0; i<n; i++){
        if(color[i]==-1){
            if(isBipartiteBfs(i,adj, color));
                return true;
        }
    }
    return false;
}

int main() {
	int V , e;
	cin >> V  >> e;
	vector<int> adj[V]; //vector of array to store edges

	for(int i = 0 ; i<e ; i++){
	    int u,v;
	    cin >> u >>v;
	    
	    adj[u].push_back(v);
	    adj[v].push_back(u);
	}

       if(CheckBipartite(adj, V))
       cout << "Yes";
       
       else 
       cout << "No";
	
	return 0;
}
