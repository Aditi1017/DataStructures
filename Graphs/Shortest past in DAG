/***
Input: 
6 7
0 1 2
0 4 1
1 2 3
4 2 2
4 5 4
5 3 1

Output: 
0 2 3 6 1 5 
***/

#include<bits/stdc++.h>
using namespace std;

void findTopoSort(int node, int vis[], stack<int> &st, vector<pair<int,int>> adj[]){
    vis[node] = 1;                                          //basically modified dfs where after dfs call gets over push into stack
    for(auto it: adj[node]){
        if(!vis[it.first])
            findTopoSort(it.first, vis, st, adj);
    }
    st.push(node);
}


void shortestPath(int src, int N, vector<pair<int,int>>adj[]){
    //generate toposort by vis array and a stack
    int vis[N] = {0};   
    stack<int>st;
    
    for(int i=0; i<N;i++){
        if(!vis[i])
            findTopoSort(i,vis,st,adj);
    }


//after toposort
int dist[N];

for(int i=0; i<N ; i++)
{
    dist[i] = INT_MAX;
}

dist[src] = 0;

while(!st.empty()){
    int node = st.top();
    st.pop();
    
    if(dist[node]!= INT_MAX){   // check dis is non infinity means we have reached that node
        for(auto it: adj[node]){
            if(dist[node]+it.second < dist[it.first]){
                dist[it.first] = dist[node]+it.second;
            }
        }
    }  
}

for(int i =0 ; i<N ; i++){
    (dist[i] == INT_MAX) ? cout << "INF" : cout << dist[i] << " "; // 1e9 means non reachable
}
}
int main() {
	int V , e;
	cin >> V  >> e;
	vector<pair<int,int>> adj[V];//vector of array to store edges
      
	for(int i = 0 ; i<e ; i++){
	    int u,v,wt;
	    cin >> u >>v >>wt;
	    
	    adj[u].push_back({v,wt});
	}

    shortestPath(0,V,adj);  // 0 is src node
	
	return 0;
}
